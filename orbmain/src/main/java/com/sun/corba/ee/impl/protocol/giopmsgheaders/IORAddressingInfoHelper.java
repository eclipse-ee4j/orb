/*
 * Copyright (c) 1997, 2020 Oracle and/or its affiliates.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License v2.0
 * w/Classpath exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause OR GPL-2.0 WITH
 * Classpath-exception-2.0
 */

package com.sun.corba.ee.impl.protocol.giopmsgheaders;

/**
 * com/sun/corba/ee/impl/protocol/giopmsgheaders/IORAddressingInfoHelper.java Generated by the IDL-to-Java compiler
 * (portable), version "3.0" from ../../../../../../../src/share/classes/com/sun/corba/ee/GiopIDL/g.idl Sunday, June 4,
 * 2000 5:18:54 PM PDT
 */

abstract public class IORAddressingInfoHelper {
    private static String _id = "IDL:messages/IORAddressingInfo:1.0";

    public static void insert(org.omg.CORBA.Any a, com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo that) {
        org.omg.CORBA.portable.OutputStream out = a.create_output_stream();
        a.type(type());
        write(out, that);
        a.read_value(out.create_input_stream(), type());
    }

    public static com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo extract(org.omg.CORBA.Any a) {
        return read(a.create_input_stream());
    }

    private static org.omg.CORBA.TypeCode __typeCode = null;
    private static boolean __active = false;

    synchronized public static org.omg.CORBA.TypeCode type() {
        if (__typeCode == null) {
            synchronized (org.omg.CORBA.TypeCode.class) {
                if (__typeCode == null) {
                    if (__active) {
                        return org.omg.CORBA.ORB.init().create_recursive_tc(_id);
                    }
                    __active = true;
                    org.omg.CORBA.StructMember[] _members0 = new org.omg.CORBA.StructMember[2];
                    org.omg.CORBA.TypeCode _tcOf_members0 = null;
                    _tcOf_members0 = org.omg.CORBA.ORB.init().get_primitive_tc(org.omg.CORBA.TCKind.tk_ulong);
                    _members0[0] = new org.omg.CORBA.StructMember("selected_profile_index", _tcOf_members0, null);
                    _tcOf_members0 = org.omg.IOP.IORHelper.type();
                    _members0[1] = new org.omg.CORBA.StructMember("ior", _tcOf_members0, null);
                    __typeCode = org.omg.CORBA.ORB.init().create_struct_tc(
                            com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfoHelper.id(), "IORAddressingInfo", _members0);
                    __active = false;
                }
            }
        }
        return __typeCode;
    }

    public static String id() {
        return _id;
    }

    public static com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo read(org.omg.CORBA.portable.InputStream istream) {
        com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo value = new com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo();
        value.selected_profile_index = istream.read_ulong();
        value.ior = org.omg.IOP.IORHelper.read(istream);
        return value;
    }

    public static void write(org.omg.CORBA.portable.OutputStream ostream,
            com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo value) {
        ostream.write_ulong(value.selected_profile_index);
        org.omg.IOP.IORHelper.write(ostream, value.ior);
    }

}
