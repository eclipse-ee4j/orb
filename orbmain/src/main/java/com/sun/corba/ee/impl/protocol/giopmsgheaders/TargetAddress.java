/*
 * Copyright (c) 1997, 2020 Oracle and/or its affiliates.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License v2.0
 * w/Classpath exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause OR GPL-2.0 WITH
 * Classpath-exception-2.0
 */

package com.sun.corba.ee.impl.protocol.giopmsgheaders;

/**
 * com/sun/corba/ee/impl/protocol/giopmsgheaders/TargetAddress.java Generated by the IDL-to-Java compiler (portable),
 * version "3.0" from ../../../../../../../src/share/classes/com/sun/corba/ee/GiopIDL/g.idl Sunday, June 4, 2000 5:18:54
 * PM PDT
 */

public final class TargetAddress implements org.omg.CORBA.portable.IDLEntity {
    private byte[] ___object_key;
    private org.omg.IOP.TaggedProfile ___profile;
    private com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo ___ior;
    private short __discriminator;
    private boolean __uninitialized = true;

    public TargetAddress() {
    }

    public short discriminator() {
        if (__uninitialized)
            throw new org.omg.CORBA.BAD_OPERATION();
        return __discriminator;
    }

    public byte[] object_key() {
        if (__uninitialized)
            throw new org.omg.CORBA.BAD_OPERATION();
        verifyobject_key(__discriminator);
        return ___object_key;
    }

    public void object_key(byte[] value) {
        __discriminator = com.sun.corba.ee.impl.protocol.giopmsgheaders.KeyAddr.value;
        ___object_key = value;
        __uninitialized = false;
    }

    private void verifyobject_key(short discriminator) {
        if (discriminator != com.sun.corba.ee.impl.protocol.giopmsgheaders.KeyAddr.value)
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    public org.omg.IOP.TaggedProfile profile() {
        if (__uninitialized)
            throw new org.omg.CORBA.BAD_OPERATION();
        verifyprofile(__discriminator);
        return ___profile;
    }

    public void profile(org.omg.IOP.TaggedProfile value) {
        __discriminator = com.sun.corba.ee.impl.protocol.giopmsgheaders.ProfileAddr.value;
        ___profile = value;
        __uninitialized = false;
    }

    private void verifyprofile(short discriminator) {
        if (discriminator != com.sun.corba.ee.impl.protocol.giopmsgheaders.ProfileAddr.value)
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    public com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo ior() {
        if (__uninitialized)
            throw new org.omg.CORBA.BAD_OPERATION();
        verifyior(__discriminator);
        return ___ior;
    }

    public void ior(com.sun.corba.ee.impl.protocol.giopmsgheaders.IORAddressingInfo value) {
        __discriminator = com.sun.corba.ee.impl.protocol.giopmsgheaders.ReferenceAddr.value;
        ___ior = value;
        __uninitialized = false;
    }

    private void verifyior(short discriminator) {
        if (discriminator != com.sun.corba.ee.impl.protocol.giopmsgheaders.ReferenceAddr.value)
            throw new org.omg.CORBA.BAD_OPERATION();
    }

    public void _default() {
        __discriminator = -32768;
        __uninitialized = false;
    }

} // class TargetAddress
