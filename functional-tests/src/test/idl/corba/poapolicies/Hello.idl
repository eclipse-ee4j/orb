/*
 * Copyright (c) 2024 Contributors to the Eclipse Foundation.
 * Copyright (c) 1997, 2020 Oracle and/or its affiliates.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
 * v. 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License v2.0
 * w/Classpath exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause OR GPL-2.0 WITH
 * Classpath-exception-2.0
 */

module HelloStuff {
  interface Hello {
    string hi();
  };
}; 

module Util {
  enum CreationMethods {
    EXPLICIT_ACTIVATION_WITH_POA_ASSIGNED_OIDS,
    EXPLICIT_ACTIVATION_WITH_USER_ASSIGNED_OIDS,
    CREATE_REFERENCE_BEFORE_ACTIVATION_WITH_POA_ASSIGNED_OIDS,
    CREATE_REFERENCE_BEFORE_ACTIVATION_WITH_USER_ASSIGNED_OIDS
  };

  // A generic factory that creates servants based on the
  // interface name. This can be used to test different
  // interfaces which contain methods that would test the
  // invocation path more extensively (example, ones that
  // throw exceptions etc)

  interface ServantFactory {
    Object create(in string intfName, in string implName, in CreationMethods how);
    void overAndOut();
  };
};
